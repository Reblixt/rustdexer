//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Offer")]
pub struct Model {
    #[sea_orm(column_name = "collectionType", column_type = "Text")]
    pub collection_type: String,
    #[sea_orm(column_type = "Text")]
    pub kiosk: String,
    #[sea_orm(
        column_name = "offerId",
        primary_key,
        auto_increment = false,
        column_type = "Text",
        unique
    )]
    pub offer_id: String,
    #[sea_orm(column_name = "offerCap", column_type = "Text", unique)]
    pub offer_cap: String,
    #[sea_orm(
        column_name = "tokenId",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub token_id: String,
    pub price: i64,
    #[sea_orm(column_name = "marketplaceFee")]
    pub marketplace_fee: i64,
    #[sea_orm(column_name = "royaltyFee")]
    pub royalty_fee: i64,
    #[sea_orm(column_name = "ownerWalletAddress", column_type = "Text")]
    pub owner_wallet_address: String,
    #[sea_orm(column_name = "kioskStandard")]
    pub kiosk_standard: bool,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "nftId", column_type = "Text", nullable)]
    pub nft_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nft::Entity",
        from = "Column::TokenId",
        to = "super::nft::Column::TokenId",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Nft,
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::OwnerWalletAddress",
        to = "super::wallet::Column::Address",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Wallet,
}

impl Related<super::nft::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nft.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
