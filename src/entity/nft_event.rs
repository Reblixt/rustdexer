//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "NftEvent")]
pub struct Model {
    #[sea_orm(column_name = "collectionType", column_type = "Text")]
    pub collection_type: String,
    #[sea_orm(
        column_name = "tokenId",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub token_id: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub digest: String,
    pub price: Option<i64>,
    #[sea_orm(column_name = "marketplaceFee")]
    pub marketplace_fee: Option<i64>,
    #[sea_orm(column_name = "royaltyFee")]
    pub royalty_fee: Option<i64>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub description: Option<Json>,
    #[sea_orm(column_type = "Text")]
    pub sender: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub reciever: Option<String>,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub r#type: String,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::Reciever",
        to = "super::wallet::Column::Address",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Wallet2,
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::Sender",
        to = "super::wallet::Column::Address",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Wallet1,
}

impl ActiveModelBehavior for ActiveModel {}
