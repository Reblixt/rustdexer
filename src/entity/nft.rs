//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Nft")]
pub struct Model {
    #[sea_orm(
        column_name = "tokenId",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub token_id: String,
    #[sea_orm(column_type = "Text")]
    pub r#type: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_name = "imageUrl", column_type = "Text")]
    pub image_url: String,
    #[sea_orm(column_type = "JsonBinary")]
    pub metadata: Json,
    #[sea_orm(column_type = "Text")]
    pub rarity: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    #[sea_orm(column_type = "Text")]
    pub kiosk: String,
    #[sea_orm(column_type = "Text")]
    pub holder: String,
    pub digests: Option<Vec<String>>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    pub volume: i64,
    #[sea_orm(column_name = "walletAddress", column_type = "Text", nullable)]
    pub wallet_address: Option<String>,
    #[sea_orm(column_name = "rarityScore")]
    pub rarity_score: Option<i32>,
    #[sea_orm(column_name = "lastSale")]
    pub last_sale: Option<i64>,
    #[sea_orm(column_name = "smallImageUrl", column_type = "Text", nullable)]
    pub small_image_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::collection::Entity",
        from = "Column::Type",
        to = "super::collection::Column::Type",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Collection,
    #[sea_orm(has_many = "super::dynamic_nft_attribute::Entity")]
    DynamicNftAttribute,
    #[sea_orm(has_one = "super::listing::Entity")]
    Listing,
    #[sea_orm(has_many = "super::offer::Entity")]
    Offer,
    #[sea_orm(has_many = "super::static_nft_attribute::Entity")]
    StaticNftAttribute,
    #[sea_orm(
        belongs_to = "super::wallet::Entity",
        from = "Column::WalletAddress",
        to = "super::wallet::Column::Address",
        on_update = "Cascade",
        on_delete = "SetNull"
    )]
    Wallet,
}

impl Related<super::collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Collection.def()
    }
}

impl Related<super::dynamic_nft_attribute::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::DynamicNftAttribute.def()
    }
}

impl Related<super::listing::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Listing.def()
    }
}

impl Related<super::offer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Offer.def()
    }
}

impl Related<super::static_nft_attribute::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::StaticNftAttribute.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Wallet.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
