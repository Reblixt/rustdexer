//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Wallet")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub address: String,
    #[sea_orm(column_name = "personalFee")]
    pub personal_fee: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_offer::Entity")]
    CollectionOffer,
    #[sea_orm(has_many = "super::kiosk::Entity")]
    Kiosk,
    #[sea_orm(has_many = "super::launchpad_collection::Entity")]
    LaunchpadCollection,
    #[sea_orm(has_many = "super::listing::Entity")]
    Listing,
    #[sea_orm(has_many = "super::nft::Entity")]
    Nft,
    #[sea_orm(has_many = "super::offer::Entity")]
    Offer,
    #[sea_orm(has_one = "super::white_list_address::Entity")]
    WhiteListAddress,
}

impl Related<super::collection_offer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionOffer.def()
    }
}

impl Related<super::kiosk::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Kiosk.def()
    }
}

impl Related<super::launchpad_collection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::LaunchpadCollection.def()
    }
}

impl Related<super::listing::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Listing.def()
    }
}

impl Related<super::nft::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nft.def()
    }
}

impl Related<super::offer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Offer.def()
    }
}

impl Related<super::white_list_address::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WhiteListAddress.def()
    }
}

impl Related<super::collection::Entity> for Entity {
    fn to() -> RelationDef {
        super::collection_offer::Relation::Collection.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::collection_offer::Relation::Wallet.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
