//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "StaticNftAttribute")]
pub struct Model {
    #[sea_orm(
        column_name = "nftTokenId",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub nft_token_id: String,
    #[sea_orm(column_name = "collectionType", column_type = "Text")]
    pub collection_type: String,
    #[sea_orm(
        column_name = "traitType",
        primary_key,
        auto_increment = false,
        column_type = "Text"
    )]
    pub trait_type: String,
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub value: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub rarity: Option<String>,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::nft::Entity",
        from = "Column::NftTokenId",
        to = "super::nft::Column::TokenId",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Nft,
}

impl Related<super::nft::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nft.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
