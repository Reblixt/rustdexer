//! `SeaORM` Entity, @generated by sea-orm-codegen 2.0.0-rc.13

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "Collection")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false, column_type = "Text")]
    pub r#type: String,
    #[sea_orm(column_type = "Text")]
    pub name: String,
    #[sea_orm(column_type = "Text")]
    pub description: String,
    #[sea_orm(column_name = "imageUrl", column_type = "Text")]
    pub image_url: String,
    pub verified: bool,
    pub volume: i64,
    #[sea_orm(column_name = "createdAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "updatedAt")]
    pub updated_at: DateTime,
    #[sea_orm(column_name = "bannerUrl", column_type = "Text", nullable)]
    pub banner_url: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::collection_offer::Entity")]
    CollectionOffer,
    #[sea_orm(has_many = "super::nft::Entity")]
    Nft,
}

impl Related<super::collection_offer::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CollectionOffer.def()
    }
}

impl Related<super::nft::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Nft.def()
    }
}

impl Related<super::wallet::Entity> for Entity {
    fn to() -> RelationDef {
        super::collection_offer::Relation::Wallet.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::collection_offer::Relation::Collection.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
